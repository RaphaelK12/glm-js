{"name":"glm-js","tagline":"code 3D math in JavaScript using OpenGL Mathematics (GLM) semantics","body":"##### Status\r\n\r\nThis is a work in progress.\r\n\r\nAs a starting point I've imported [three.js](https://github.com/mrdoob/three.js/)'s `Vertex`, `Quaternion` and `Matrix` implementations and then stretched them onto the desired GLM interfaces (using brute force and polyfill superglue).\r\n\r\n#### Demos\r\n\r\n*(jsfiddles etc. coming soon)*\r\n\r\n#### Background\r\n\r\nI like how [GLM](http://glm.g-truc.net/) encourages both *mindset* and *code* re-use by adopting the GLSL specification. To quote from the project's home page:\r\n\r\n> GLM provides classes and functions designed and implemented with the same naming conventions and functionalities than GLSL so that when a programmer knows GLSL, he knows GLM as well which makes it really easy to use.\r\n\r\nSimilarly, **glm-js** provides interfaces designed and implemented with the same naming conventions and functionalities as GLM and GLSL in mind. \r\n\r\nAnd for the brave -- I'm also implementing several GLM/GLSL operators, overloads and swizzles. :boom:\r\n\r\n#### Shadow Table\r\n\r\n<table align=center>\r\n<thead>\r\n<tr>\r\n<th>Library</th>\r\n<th>Language</th>\r\n<th title='(computer|graphics|virtual) processing unit'>PU</th>\r\n<th>Link</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>GLSL</td>\r\n<td>C (like)</td>\r\n<td>GPU</td>\r\n<td><a href=\"https://www.opengl.org/documentation/glsl/\">OpenGL Shading Language</a></td>\r\n</tr>\r\n<tr>\r\n<td>GLM</td>\r\n<td>C++</td>\r\n<td>CPU</td>\r\n<td><a href=\"http://glm.g-truc.net/\">OpenGL Mathematics</a></td>\r\n</tr>\r\n<tr>\r\n<td>glm-js</td>\r\n<td>JavaScript</td>\r\n<td>JSPU</td>\r\n<td>&infin;</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n\r\n#### Code\r\n\r\n*(better JavaScript code examples to follow)*\r\n\r\nFor now here is a set of examples that all do the same thing -- to demonstrate how similar three of them are and how different stock *three.js* conventions are by comparison.\r\n\r\n*GLM* and *C++11*:\r\n```cpp\r\n    #include <glm/glm.hpp>\r\n    //...\r\n    static auto mrot = glm::angleAxis(glm::radians(45.0f), glm::vec3(0,1,0));\r\n\r\n    auto m1 = glm::mat4(1.0f); \r\n    auto m2 = glm::mat4(2.0f);\r\n\r\n    auto m3 = m1 * m2;\r\n\r\n    m3 *= glm::toMat4(mrot);\r\n```\r\n\r\n*GLSL*:\r\n\r\n```glsl\r\n    uniform mat4 mrot; // perhaps an incoming glUniform4fv\r\n\r\n    mat4 m1 = mat4(1.0); \r\n    mat4 m2 = mat4(2.0);\r\n\r\n    mat4 m3 = m1 * m2;\r\n\r\n    //...\r\n    m3 *= mrot;\r\n```\r\n\r\n... **glm-js** and *JavaScript*:\r\n```javascript\r\n    var glm = require('./glm');\r\n\r\n    this.mrot = this.mrot ||\r\n        glm.angleAxis(glm.radians(45.0), glm.vec3(0,1,0));\r\n    // ...\r\n    var m1 = glm.mat4(1.0); \r\n    var m2 = glm.mat4(2.0);\r\n    \r\n    var m3 = m1['*'](m2); // operator sugars\r\n    \r\n    m3['*='](glm.toMat4(this.mrot)); // three.js-style inplace mutation\r\n```\r\n\r\nLooks at least a little similar, right?  To me all three of those are OpenGL-like, which can be useful to consider when solving complex matrix problems across varying contexts.\r\n\r\nAnd for completeness, here is the same math implemented using stock *three.js* calls:\r\n```javascript\r\n    var THREE = require('./three');\r\n\r\n    this.mrot = this.mrot ||\r\n        new THREE.Quaternion().setFromAxisAngle(\r\n            new THREE.Vector3(0,1,0), THREE.Math.degToRad(45.0));  \r\n    //...  \r\n    var m1 = new THREE.Matrix4();  \r\n    var m2 = new THREE.Matrix4();\r\n    // ... just want a diagonal mat4(2) here, is there an easier way??\r\n    m2.scale(new THREE.Vector3(2.0,2.0,2.0)).elements[15] = 2.0;\r\n     \r\n    var m3 = m1.clone().multiply(m2); \r\n    m3.multiply(new THREE.Matrix4().makeRotationFromQuaternion(this.mrot));  \r\n```\r\n\r\n#### ... a work in progress\r\n\r\n*three.js* includes a comprehensive (and verbose and evolving) set of math interfaces that with effort can be adapted into GLM-style semantics. However, there are other (MIT-licensed) JS math libraries to choose from, and it's possible one or more of them might work better for this.  A few that look promising so far are:\r\n\r\n* [Sylvester](https://github.com/jcoglan/sylvester)\r\n* [glMatrix](https://github.com/toji/gl-matrix)\r\n* [Numeric JavaScript](https://github.com/sloisel/numeric)\r\n \r\n#### License\r\nglm-js itself is released under the MIT license (see LICENSE for details)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}