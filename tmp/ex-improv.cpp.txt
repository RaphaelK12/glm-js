GLM C++: 0.9.6
fvec4(1.000000, 2.000000, 3.000000, 4.000000)
t * 2.0 fvec4(2.000000, 4.000000, 6.000000, 8.000000)
t *= 2.0 fvec4(2.000000, 4.000000, 6.000000, 8.000000)
t.xy fvec2(2.000000, 4.000000)
r: <quat>fvec3(0.000000, 30.000002, 0.000000)
r: <quat>fvec3(0.000000, 30.000002, 0.000000)
s: mat4x4((3.000000, 0.000000, 0.000000, 0.000000), (0.000000, 1.000000, 0.000000, 0.000000), (0.000000, 0.000000, 0.000000, 0.000000), (0.000000, 0.000000, 0.000000, 1.000000))
s: mat4x4((3.000000, 0.000000, 0.000000, 0.000000), (0.000000, 1.000000, 0.000000, 0.000000), (0.000000, 0.000000, 0.100000, 0.000000), (0.000000, 0.000000, 0.000000, 1.000000))
q: fvec4(0.965926, 0.000000, 0.258819, 0.000000)
30 degrees: fvec3(0.000000, 30.000002, 0.000000)
v3: fvec3(3.000000, 3.000000, 3.000000)
glm.quat(v3): <quat>fvec3(-8.112661, 8.112661, -8.112660)
q * v3:  fvec3(4.098076, 3.000000, 1.098076)
q: fvec4(1.000000, 0.000000, 0.000000, 0.000000)
v3: fvec3(1.000000, 2.000000, 3.000000)
q * v3:  fvec3(1.000000, 2.000000, 3.000000)
angle(q) float(44.999992)
axis(q) fvec3(0.000000, 1.000000, 0.000000)
diagonal4x4(vec4(1,2,3,4)):  mat4x4((1.000000, 0.000000, 0.000000, 0.000000), (0.000000, 2.000000, 0.000000, 0.000000), (0.000000, 0.000000, 3.000000, 0.000000), (0.000000, 0.000000, 0.000000, 4.000000))
diagonal3x3(vec3(1,2,3)):  mat3x3((1.000000, 0.000000, 0.000000), (0.000000, 2.000000, 0.000000), (0.000000, 0.000000, 3.000000))
mat3(2):  mat3x3((2.000000, 0.000000, 0.000000), (0.000000, 2.000000, 0.000000), (0.000000, 0.000000, 2.000000))
mat4(2):  mat4x4((2.000000, 0.000000, 0.000000, 0.000000), (0.000000, 2.000000, 0.000000, 0.000000), (0.000000, 0.000000, 2.000000, 0.000000), (0.000000, 0.000000, 0.000000, 2.000000))
mat4(vec4 x 4):  mat4x4((1.000000, 1.000000, 1.000000, 1.000000), (2.000000, 2.000000, 2.000000, 2.000000), (3.000000, 3.000000, 3.000000, 3.000000), (4.000000, 4.000000, 4.000000, 4.000000))
mat4(1..,2..,3..,4..):  mat4x4((1.000000, 1.000000, 1.000000, 1.000000), (2.000000, 2.000000, 2.000000, 2.000000), (3.000000, 3.000000, 3.000000, 3.000000), (4.000000, 4.000000, 4.000000, 4.000000))
m4 == m4a true
mat4(mat3(2)):  mat4x4((2.000000, 0.000000, 0.000000, 0.000000), (0.000000, 2.000000, 0.000000, 0.000000), (0.000000, 0.000000, 2.000000, 0.000000), (0.000000, 0.000000, 0.000000, 1.000000))
m4 == m4b false
mat4({{...} x 4}}:  mat4x4((1.000000, 2.000000, 3.000000, 4.000000), (4.000000, 3.000000, 2.000000, 1.000000), (1.000000, 2.000000, 3.000000, 4.000000), (4.000000, 3.000000, 2.000000, 1.000000))
mat4({ float x 16}}:  mat4x4((1.000000, 2.000000, 3.000000, 4.000000), (4.000000, 3.000000, 2.000000, 1.000000), (1.000000, 2.000000, 3.000000, 4.000000), (4.000000, 3.000000, 2.000000, 1.000000))
vec2(200,300) fvec2(200.000000, 300.000000)
uvec2(2.99,3.99) uvec2(2, 3)
uvec2(-2.1,0.01) uvec2(-2, 0)
uvec2(-2.5,0).x uint(-2)
ivec2(2.99,3.99) ivec2(2, 3)
ivec2(-2.1,0.01) ivec2(-2, 0)
ivec2(-2.5,0).x int(-2)
vec3(200,300,400) fvec3(200.000000, 300.000000, 400.000000)
vec3(vec4(5)) fvec3(5.000000, 5.000000, 5.000000)
vec3(bvec4(true)) fvec3(1.000000, 1.000000, 1.000000)
bvec3(vec4(1,1,0,1)) bvec3(true, true, false)
ivec3(uvec4(-5.5,4.6,-3.7,2)) ivec3(-5, 4, -3)
uvec4(ivec3(-5.5,4.6,-3.7),.5) uvec4(-5, 4, -3, 0)
ivec3 = uvec3 ivec3(-5, 4, -3)
ivec3 = bvec3 ivec3(1, 0, 1)
uvec2 = ivec2 uvec2(-5, 4)
uvec2 = bvec2 uvec2(1, 0)
bvec4 = ivec4 bvec4(true, true, true, false)
bvec4 = bvec4 bvec4(true, false, true, false)
bvec4 = uvec4 bvec4(false, true, true, true)
translate(1,2,3) mat4x4((1.000000, 0.000000, 0.000000, 0.000000), (0.000000, 1.000000, 0.000000, 0.000000), (0.000000, 0.000000, 1.000000, 0.000000), (1.000000, 2.000000, 3.000000, 1.000000))
q length float(1.135782)
q normalized fvec3(0.555977, 0.348071, 0.861276)
q[0,1,2,3] fvec4(0.176090, 0.264135, 0.352180, 0.880451)
q(e(q)) <quat>fvec3(31.855131, 19.943005, 49.347450)
q * v3:  fvec3(5.372093, 9.395349, 8.767442)
glm.length2(q * v3):  float(194.000000)
glm.length(q * v3):  float(13.928389)
glm.inverse(q) <quat>fvec3(-8.829744, -36.096519, -40.720535)
glm.quat(glm.inverse(glm.toMat4(m))) <quat>fvec3(-8.829746, -36.096527, -40.720535)
qq <quat>fvec3(20.103909, 14.123745, 20.103909)
qq * v3:  fvec3(7.422649, 7.422650, 9.154700)
v3 * q:  fvec3(6.922481, 6.294574, 10.317830)
qq2 * 2.0:  fvec4(0.298858, 0.298858, 0.298858, 1.931852)
qq2 * 2.0:  fvec4(0.298858, 0.298858, 0.298858, 1.931852)
qq2 * 2.0:  fvec3(20.103909, 77.439713, 20.103909)
v3 = v3 * q:  fvec3(6.922481, 6.294574, 10.317830)
qqq <quat>fvec3(0.000000, 30.000002, 0.000000)
qqq * v4:  fvec4(1.366025, 1.000000, 0.366025, 1.000000)
v4 * qqq:  fvec4(0.366025, 1.000000, 1.366025, 1.000000)
glm.rotation(u * qqq, u):  <quat>fvec3(0.000000, 30.000004, 0.000000)
m4 mat4x4((0.866025, 0.000000, -0.500000, 0.000000), (0.000000, 1.000000, 0.000000, 0.000000), (0.500000, 0.000000, 0.866025, 0.000000), (0.000000, 0.000000, 0.000000, 1.000000))
v4 fvec4(1.000000, 1.000000, 1.000000, 1.000000)
v4 * m4:  fvec4(0.366025, 1.000000, 1.366025, 1.000000)
m4 * v4:  fvec4(1.366025, 1.000000, 0.366025, 1.000000)
v4 = v4 * m4:  fvec4(0.366025, 1.000000, 1.366025, 1.000000)
glm.mix(qa,qb,.5) <quat>fvec3(0.000000, 36.999996, 0.000000)
glm.slerp(qa,qb,.1) <quat>fvec3(0.000000, 36.999996, 0.000000)
glm.slerp(qa,qb,.9) <quat>fvec3(0.000000, -26.999998, 0.000000)
glm.mix(qa,qb,.9) <quat>fvec3(0.000000, -26.999998, 0.000000)
glm.fract(3.14) float(0.140000)
glm.abs(-3.14) float(3.140000)
glm.radians(v) fvec3(-0.026180, 0.034907, 0.052360)
glm.fract(v) fvec3(0.500000, 0.000000, 0.000000)
glm.abs(v) fvec3(1.500000, 2.000000, 3.000000)
glm.sign(v) fvec3(-1.000000, 1.000000, 1.000000)
glm.max(v,2.5) fvec3(2.500000, 2.500000, 3.000000)
glm.min(v,2.5) fvec3(-1.500000, 2.000000, 2.500000)
glm.clamp(v,-1.0,1.0) fvec3(-1.000000, 1.000000, 1.000000)
glm.frexp(x,n[]) fraction: float(0.512500)
glm.frexp(x,n[]) exponent: int(5)
glm.frexp(x,n[]) fraction: float(-0.512500)
glm.frexp(x,n[]) exponent: int(5)
A = glm.frexp(vec3,ivec3); A ==  fvec3(0.500000, 0.960000, 0.500000)
A = glm.frexp(vec3,ivec3); ivec3 ==  ivec3(11, -2, -22)
glm.ldexp(A,ivec3) ==  fvec3(1024.000000, 0.240000, 0.000000)
glm.equal(glm.vec3(1+ep),glm.vec3(1)) bvec3(false, false, false)
glm.all(v) bool(false)
glm.epsilonEqual(glm.vec3(1+ep),glm.vec3(1),ep) bvec3(true, true, true)
glm.all(v+-ep) bool(true)
glm.epsilonEqual(glm.q(45+ep),glm.quat(45),ep) bvec4(true, true, true, true)
glm.all(v2+-ep) bool(true)
m == m2 bool(false)
unProject fvec3(-1.997720, -3.224575, 1.315594)
project fvec3(0.785399, 0.785399, 0.785398)
lookAt(vec(0), vec3(1), vec3(0,1,0)) mat4x4((-0.707107, -0.408248, -0.577350, 0.000000), (0.000000, 0.816497, -0.577350, 0.000000), (0.707107, -0.408248, -0.577350, 0.000000), (-0.000000, -0.000000, 0.000000, 1.000000))
dot(x,y) float(-0.046045)
clamp(dot(x,y), 0, 1) float(0.000000)
Angle = acos(clamp(dot(x,y), 0, 1)) float(1.570796)
cross(x,y) fvec3(-0.998938, 0.000000, 0.001367)
dot(ref, cross(x,y)) float(-0.002011)
drcxy = dot(ref, cross(x, y)) < T(0) float(1.000000)
mix(Angle, -Angle, drcxy) float(-1.570796)
glm.orientedAngle float(-1.047198)
glm.orientedAngle float(-1.570796)
